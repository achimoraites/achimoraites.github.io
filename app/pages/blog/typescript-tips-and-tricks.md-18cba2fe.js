import{S as n,i as a,s,A as t,j as e,m as p,o,p as c,v as r,r as i,w as l,q as u,e as k,t as h,k as f,c as m,a as y,g,d,n as b,b as w,f as v,D as P,E as x}from"../../chunks/vendor-165bcab4.js";import{B as E}from"../../chunks/blog-post-layout-fd90a097.js";import"../../chunks/OpenGraph-241cde62.js";import"../../chunks/Tags-be1121b8.js";function T(n){let a,s,t,e,p,o,c,r,i,l,u,E,T,$,H,C,j,_,A,B,F,S,D,G,M,Y,q,I,O,J,L,R,U,W,z,K,N,Q,V,X,Z,nn,an,sn;return{c(){a=k("p"),s=h("Here are two Typescript tricks to make your life as a software developer easier."),t=f(),e=k("h2"),p=h("Create Flexible interfaces"),o=f(),c=k("p"),r=h("Ever wondering if you can find a middle ground between the "),i=k("code"),l=h("any"),u=h(" type and of a specific type/interface ?"),E=f(),T=k("p"),$=h("The answer is yes!\nYou can make an interface that contains any number of attributes of a specific type while having the ability to have any attribute name:"),H=f(),C=k("pre"),j=f(),_=k("p"),A=h("Taking advantage of this technique you can create flexible types without using type "),B=k("code"),F=h("any"),S=h(" !"),D=f(),G=k("h2"),M=h("Create a type that has a partial match of another type"),Y=f(),q=k("p"),I=h("This effectively means that we can match any number of properties of a given type:"),O=f(),J=k("pre"),L=f(),R=k("p"),U=h("Happy coding ðŸ˜„"),W=f(),z=k("h3"),K=h("Credits"),N=f(),Q=k("p"),V=h("Photo by "),X=k("a"),Z=h("Yogendra Singh"),nn=h("  from "),an=k("a"),sn=h("Pexels"),this.h()},l(n){a=m(n,"P",{});var k=y(a);s=g(k,"Here are two Typescript tricks to make your life as a software developer easier."),k.forEach(d),t=b(n),e=m(n,"H2",{});var h=y(e);p=g(h,"Create Flexible interfaces"),h.forEach(d),o=b(n),c=m(n,"P",{});var f=y(c);r=g(f,"Ever wondering if you can find a middle ground between the "),i=m(f,"CODE",{});var w=y(i);l=g(w,"any"),w.forEach(d),u=g(f," type and of a specific type/interface ?"),f.forEach(d),E=b(n),T=m(n,"P",{});var v=y(T);$=g(v,"The answer is yes!\nYou can make an interface that contains any number of attributes of a specific type while having the ability to have any attribute name:"),v.forEach(d),H=b(n),C=m(n,"PRE",{class:!0}),y(C).forEach(d),j=b(n),_=m(n,"P",{});var P=y(_);A=g(P,"Taking advantage of this technique you can create flexible types without using type "),B=m(P,"CODE",{});var x=y(B);F=g(x,"any"),x.forEach(d),S=g(P," !"),P.forEach(d),D=b(n),G=m(n,"H2",{});var tn=y(G);M=g(tn,"Create a type that has a partial match of another type"),tn.forEach(d),Y=b(n),q=m(n,"P",{});var en=y(q);I=g(en,"This effectively means that we can match any number of properties of a given type:"),en.forEach(d),O=b(n),J=m(n,"PRE",{class:!0}),y(J).forEach(d),L=b(n),R=m(n,"P",{});var pn=y(R);U=g(pn,"Happy coding ðŸ˜„"),pn.forEach(d),W=b(n),z=m(n,"H3",{});var on=y(z);K=g(on,"Credits"),on.forEach(d),N=b(n),Q=m(n,"P",{});var cn=y(Q);V=g(cn,"Photo by "),X=m(cn,"A",{href:!0,rel:!0});var rn=y(X);Z=g(rn,"Yogendra Singh"),rn.forEach(d),nn=g(cn,"  from "),an=m(cn,"A",{href:!0,rel:!0});var ln=y(an);sn=g(ln,"Pexels"),ln.forEach(d),cn.forEach(d),this.h()},h(){w(C,"class","language-typescript"),w(J,"class","language-typescript"),w(X,"href","https://www.pexels.com/@yogendras31?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels"),w(X,"rel","nofollow"),w(an,"href","https://www.pexels.com/photo/man-jumping-high-while-posing-1701197/?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels"),w(an,"rel","nofollow")},m(n,k){v(n,a,k),P(a,s),v(n,t,k),v(n,e,k),P(e,p),v(n,o,k),v(n,c,k),P(c,r),P(c,i),P(i,l),P(c,u),v(n,E,k),v(n,T,k),P(T,$),v(n,H,k),v(n,C,k),C.innerHTML='<code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">FlexInterface</span> <span class="token punctuation">&#123;</span>\n  <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> Person<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token comment">// now you can use it like</span>\n<span class="token keyword">const</span> Group<span class="token operator">:</span> FlexInterface <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  alice<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n    name<span class="token operator">:</span> <span class="token string">\'Alice Byers\'</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">24</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  brian<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n    name<span class="token operator">:</span> <span class="token string">\'Brian Sanders\'</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">16</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// still this will fail!</span>\n\n<span class="token keyword">const</span> Group2<span class="token operator">:</span> FlexInterface <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  alice<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n    name<span class="token operator">:</span> <span class="token string">\'Alice Byers\'</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">24</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  brian<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n    name<span class="token operator">:</span> <span class="token string">\'Brian Sanders\'</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">16</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n <span class="token comment">// Type \'string\' is not assignable to type \'Person\'</span>\n  matt<span class="token operator">:</span> <span class="token string">\'Mathew\'</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n</code>',v(n,j,k),v(n,_,k),P(_,A),P(_,B),P(B,F),P(_,S),v(n,D,k),v(n,G,k),P(G,M),v(n,Y,k),v(n,q,k),P(q,I),v(n,O,k),v(n,J,k),J.innerHTML='<code class="language-typescript">\n<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">PartialPerson</span> <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">updatePerson</span><span class="token punctuation">(</span>personToUpdate<span class="token operator">:</span> Person<span class="token punctuation">,</span> attributes<span class="token operator">:</span> PartialPerson<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> personToUpdate<span class="token punctuation">,</span> <span class="token operator">...</span>attributes <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token keyword">let</span> person<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  name<span class="token operator">:</span> <span class="token string">\'John Doe\'</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">8</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">// this works as expected</span>\n<span class="token keyword">const</span> attrs1<span class="token operator">:</span> PartialPerson <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  age<span class="token operator">:</span> <span class="token number">38</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// this will fail</span>\n<span class="token keyword">const</span> attrs2<span class="token operator">:</span> PartialPerson <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  hobbies<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'chess\'</span><span class="token punctuation">,</span> <span class="token string">\'swimming\'</span><span class="token punctuation">,</span> <span class="token string">\'coding\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\nperson <span class="token operator">=</span> <span class="token function">updatePerson</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> attrs1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code>',v(n,L,k),v(n,R,k),P(R,U),v(n,W,k),v(n,z,k),P(z,K),v(n,N,k),v(n,Q,k),P(Q,V),P(Q,X),P(X,Z),P(Q,nn),P(Q,an),P(an,sn)},p:x,d(n){n&&d(a),n&&d(t),n&&d(e),n&&d(o),n&&d(c),n&&d(E),n&&d(T),n&&d(H),n&&d(C),n&&d(j),n&&d(_),n&&d(D),n&&d(G),n&&d(Y),n&&d(q),n&&d(O),n&&d(J),n&&d(L),n&&d(R),n&&d(W),n&&d(z),n&&d(N),n&&d(Q)}}}function $(n){let a,s;const k=[H];let h={$$slots:{default:[T]},$$scope:{ctx:n}};for(let e=0;e<k.length;e+=1)h=t(h,k[e]);return a=new E({props:h}),{c(){e(a.$$.fragment)},l(n){p(a.$$.fragment,n)},m(n,t){o(a,n,t),s=!0},p(n,[s]){const t=0&s?c(k,[u(H)]):{};1&s&&(t.$$scope={dirty:s,ctx:n}),a.$set(t)},i(n){s||(r(a.$$.fragment,n),s=!0)},o(n){i(a.$$.fragment,n),s=!1},d(n){l(a,n)}}}const H={author:"achimoraites",date:"Wed Jan 29 2020 00:00:00 GMT+0200",excerpt:"Here are two Typescript tricks to make your life as a software developer easier.",image:"https://images.pexels.com/photos/1701206/pexels-photo-1701206.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=225&w=400",tags:["typescript","oop","productivity"],slug:"typescript-tips-and-tricks",subtitle:"Here are two Typescript tricks to make your life as a software developer easier.",title:"Typescript Tips and Tricks",url:"https://achimoraites.github.io/blog/typescript-tips-and-tricks"},C=!0;export default class extends n{constructor(n){super(),a(this,n,null,$,s,{})}}export{H as metadata,C as prerender};
